#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals, improper_ctypes, dead_code)]
/* automatically generated by rust-bindgen 0.72.1 */

pub const DDS_HAS_SECURITY: u32 = 1;
pub const DDS_HAS_LIFESPAN: u32 = 1;
pub const DDS_HAS_DEADLINE_MISSED: u32 = 1;
pub const DDS_HAS_NETWORK_PARTITIONS: u32 = 1;
pub const DDS_HAS_TCP_TLS: u32 = 1;
pub const DDS_HAS_TYPELIB: u32 = 1;
pub const DDS_HAS_TYPE_DISCOVERY: u32 = 1;
pub const DDS_HAS_TOPIC_DISCOVERY: u32 = 1;
pub const DDS_HAS_QOS_PROVIDER: u32 = 1;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _ASSERT_H: u32 = 1;
pub const DDSRT_HAVE_DYNLIB: u32 = 1;
pub const DDSRT_HAVE_FILESYSTEM: u32 = 1;
pub const DDSRT_HAVE_NETSTAT: u32 = 1;
pub const DDSRT_HAVE_RUSAGE: u32 = 1;
pub const DDSRT_HAVE_IPV6: u32 = 1;
pub const DDSRT_HAVE_SSM: u32 = 1;
pub const DDSRT_HAVE_DNS: u32 = 1;
pub const DDSRT_HAVE_GETADDRINFO: u32 = 1;
pub const DDSRT_HAVE_GETHOSTBYNAME_R: u32 = 1;
pub const DDSRT_HAVE_GETHOSTNAME: u32 = 1;
pub const DDSRT_HAVE_INET_NTOP: u32 = 1;
pub const DDSRT_HAVE_INET_PTON: u32 = 1;
pub const DDSRT_HAVE_CONDATTR_SETCLOCK: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const PRIdSIZE: &[u8; 3] = b"zd\0";
pub const PRIuSIZE: &[u8; 3] = b"zu\0";
pub const PRIxSIZE: &[u8; 3] = b"zx\0";
pub const DDSRT_RFC3339STRLEN: u32 = 25;
pub const DDS_RETCODE_OK: u32 = 0;
pub const DDS_RETCODE_ERROR: i32 = -1;
pub const DDS_RETCODE_UNSUPPORTED: i32 = -2;
pub const DDS_RETCODE_BAD_PARAMETER: i32 = -3;
pub const DDS_RETCODE_PRECONDITION_NOT_MET: i32 = -4;
pub const DDS_RETCODE_OUT_OF_RESOURCES: i32 = -5;
pub const DDS_RETCODE_NOT_ENABLED: i32 = -6;
pub const DDS_RETCODE_IMMUTABLE_POLICY: i32 = -7;
pub const DDS_RETCODE_INCONSISTENT_POLICY: i32 = -8;
pub const DDS_RETCODE_ALREADY_DELETED: i32 = -9;
pub const DDS_RETCODE_TIMEOUT: i32 = -10;
pub const DDS_RETCODE_NO_DATA: i32 = -11;
pub const DDS_RETCODE_ILLEGAL_OPERATION: i32 = -12;
pub const DDS_RETCODE_NOT_ALLOWED_BY_SECURITY: i32 = -13;
pub const DDS_XRETCODE_BASE: i32 = -50;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const DDS_LC_FATAL: u32 = 1;
pub const DDS_LC_ERROR: u32 = 2;
pub const DDS_LC_WARNING: u32 = 4;
pub const DDS_LC_INFO: u32 = 8;
pub const DDS_LC_CONFIG: u32 = 16;
pub const DDS_LC_DISCOVERY: u32 = 32;
pub const DDS_LC_DATA: u32 = 64;
pub const DDS_LC_TRACE: u32 = 128;
pub const DDS_LC_RADMIN: u32 = 256;
pub const DDS_LC_TIMING: u32 = 512;
pub const DDS_LC_TRAFFIC: u32 = 1024;
pub const DDS_LC_TOPIC: u32 = 2048;
pub const DDS_LC_TCP: u32 = 4096;
pub const DDS_LC_PLIST: u32 = 8192;
pub const DDS_LC_WHC: u32 = 16384;
pub const DDS_LC_THROTTLE: u32 = 32768;
pub const DDS_LC_RHC: u32 = 65536;
pub const DDS_LC_CONTENT: u32 = 131072;
pub const DDS_LC_MALFORMED: u32 = 262144;
pub const DDS_LC_SYSDEF: u32 = 524288;
pub const DDS_LC_QOSPROV: u32 = 1048576;
pub const DDS_LC_USER1: u32 = 536870912;
pub const DDS_LC_USER2: u32 = 1073741824;
pub const DDS_LC_USER3: u32 = 2147483648;
pub const DDS_LC_USER: u32 = 3758096384;
pub const DDS_LC_ALL: u32 = 3758266111;
pub const DDS_LOG_MASK: u32 = 15;
pub const DDS_TRACE_MASK: i32 = -16;
pub const DDS_FREE_KEY_BIT: u32 = 1;
pub const DDS_FREE_CONTENTS_BIT: u32 = 2;
pub const DDS_FREE_ALL_BIT: u32 = 4;
pub const DDS_OP_MASK: u32 = 4278190080;
pub const DDS_OP_TYPE_FLAGS_MASK: u32 = 8388608;
pub const DDS_OP_TYPE_MASK: u32 = 8323072;
pub const DDS_OP_SUBTYPE_MASK: u32 = 65280;
pub const DDS_OP_JMP_MASK: u32 = 65535;
pub const DDS_OP_FLAGS_MASK: u32 = 255;
pub const DDS_JEQ_TYPE_FLAGS_MASK: u32 = 8388608;
pub const DDS_JEQ_TYPE_MASK: u32 = 8323072;
pub const DDS_PLM_FLAGS_MASK: u32 = 16711680;
pub const DDS_KOF_OFFSET_MASK: u32 = 65535;
pub const DDS_MID_OFFSET_MASK: u32 = 65535;
pub const DDS_OP_FLAG_EXT: u32 = 8388608;
pub const DDS_OP_FLAG_KEY: u32 = 1;
pub const DDS_OP_FLAG_DEF: u32 = 2;
pub const DDS_OP_FLAG_FP: u32 = 2;
pub const DDS_OP_FLAG_SGN: u32 = 4;
pub const DDS_OP_FLAG_MU: u32 = 8;
pub const DDS_OP_FLAG_BASE: u32 = 16;
pub const DDS_OP_FLAG_OPT: u32 = 32;
pub const DDS_OP_FLAG_SZ_SHIFT: u32 = 6;
pub const DDS_OP_FLAG_SZ_MASK: u32 = 192;
pub const DDS_TOPIC_NO_OPTIMIZE: u32 = 1;
pub const DDS_TOPIC_FIXED_KEY: u32 = 2;
pub const DDS_TOPIC_CONTAINS_UNION: u32 = 4;
pub const DDS_TOPIC_FIXED_SIZE: u32 = 16;
pub const DDS_TOPIC_FIXED_KEY_XCDR2: u32 = 32;
pub const DDS_TOPIC_XTYPES_METADATA: u32 = 64;
pub const DDS_TOPIC_RESTRICT_DATA_REPRESENTATION: u32 = 128;
pub const DDS_TOPIC_KEY_MUTABLE: u32 = 256;
pub const DDS_TOPIC_KEY_APPENDABLE: u32 = 512;
pub const DDS_TOPIC_FIXED_KEY_XCDR2_KEYHASH: u32 = 1024;
pub const DDS_TOPIC_KEY_SEQUENCE: u32 = 2048;
pub const DDS_TOPIC_KEY_ARRAY_NONPRIM: u32 = 4096;
pub const DDS_FIXED_KEY_MAX_SIZE: u32 = 16;
pub const DDS_DATA_REPRESENTATION_XCDR1: u32 = 0;
pub const DDS_DATA_REPRESENTATION_XML: u32 = 1;
pub const DDS_DATA_REPRESENTATION_XCDR2: u32 = 2;
pub const DDS_DATA_REPRESENTATION_FLAG_XCDR1: u32 = 1;
pub const DDS_DATA_REPRESENTATION_FLAG_XML: u32 = 2;
pub const DDS_DATA_REPRESENTATION_FLAG_XCDR2: u32 = 4;
pub const DDS_DATA_REPRESENTATION_RESTRICT_DEFAULT: u32 = 5;
pub const DDS_READ_SAMPLE_STATE: u32 = 1;
pub const DDS_NOT_READ_SAMPLE_STATE: u32 = 2;
pub const DDS_ANY_SAMPLE_STATE: u32 = 3;
pub const DDS_NEW_VIEW_STATE: u32 = 4;
pub const DDS_NOT_NEW_VIEW_STATE: u32 = 8;
pub const DDS_ANY_VIEW_STATE: u32 = 12;
pub const DDS_ALIVE_INSTANCE_STATE: u32 = 16;
pub const DDS_NOT_ALIVE_DISPOSED_INSTANCE_STATE: u32 = 32;
pub const DDS_NOT_ALIVE_NO_WRITERS_INSTANCE_STATE: u32 = 64;
pub const DDS_ANY_INSTANCE_STATE: u32 = 112;
pub const DDS_ANY_STATE: u32 = 127;
pub const DDS_HANDLE_NIL: u32 = 0;
pub const DDS_ENTITY_NIL: u32 = 0;
pub const DDS_LENGTH_UNLIMITED: i32 = -1;
pub const DDS_HAS_PROPERTY_LIST_QOS: u32 = 1;
pub const DDS_ERR_NR_MASK: u32 = 255;
pub const DDS_ERR_LINE_MASK: u32 = 4194048;
pub const DDS_ERR_FILE_ID_MASK: u32 = 2143289344;
pub const DDS_LUNSET: u32 = 0;
pub const DDS_DYNAMIC_MEMBER_ID_INVALID: u32 = 251658240;
pub const DDS_DYNAMIC_MEMBER_ID_AUTO: u32 = 251658240;
pub const DDS_DYNAMIC_MEMBER_INDEX_START: u32 = 0;
pub const DDS_DYNAMIC_MEMBER_INDEX_END: u32 = 4294967295;
pub const DDS_DYNAMIC_BITMASK_POSITION_AUTO: u32 = 65535;
pub const DDS_HAS_DDSI_SERTYPE: u32 = 1;
pub const DDS_HAS_CREATE_TOPIC_SERTYPE: u32 = 1;
pub const DDS_HAS_READCDR: u32 = 1;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type dds_entity_t = i32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_builtintopic_guid {
    pub v: [u8; 16usize],
}
pub type dds_builtintopic_guid_t = dds_builtintopic_guid;
pub type dds_guid_t = dds_builtintopic_guid;
unsafe extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char, __file: *const ::std::os::raw::c_char, __line: ::std::os::raw::c_uint, __function: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int, __file: *const ::std::os::raw::c_char, __line: ::std::os::raw::c_uint, __function: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn __assert(__assertion: *const ::std::os::raw::c_char, __file: *const ::std::os::raw::c_char, __line: ::std::os::raw::c_int) -> !;
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
unsafe extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(__nptr: *const ::std::os::raw::c_char, __endptr: *mut *mut ::std::os::raw::c_char, __base: ::std::os::raw::c_int) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(__nptr: *const ::std::os::raw::c_char, __endptr: *mut *mut ::std::os::raw::c_char, __base: ::std::os::raw::c_int) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(__nptr: *const __gwchar_t, __endptr: *mut *mut __gwchar_t, __base: ::std::os::raw::c_int) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(__nptr: *const __gwchar_t, __endptr: *mut *mut __gwchar_t, __base: ::std::os::raw::c_int) -> uintmax_t;
}
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
unsafe extern "C" {
    pub fn access(__name: *const ::std::os::raw::c_char, __type: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn faccessat(__fd: ::std::os::raw::c_int, __file: *const ::std::os::raw::c_char, __type: ::std::os::raw::c_int, __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lseek(__fd: ::std::os::raw::c_int, __offset: __off_t, __whence: ::std::os::raw::c_int) -> __off_t;
}
unsafe extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn read(__fd: ::std::os::raw::c_int, __buf: *mut ::std::os::raw::c_void, __nbytes: usize) -> isize;
}
unsafe extern "C" {
    pub fn write(__fd: ::std::os::raw::c_int, __buf: *const ::std::os::raw::c_void, __n: usize) -> isize;
}
unsafe extern "C" {
    pub fn pread(__fd: ::std::os::raw::c_int, __buf: *mut ::std::os::raw::c_void, __nbytes: usize, __offset: __off_t) -> isize;
}
unsafe extern "C" {
    pub fn pwrite(__fd: ::std::os::raw::c_int, __buf: *const ::std::os::raw::c_void, __n: usize, __offset: __off_t) -> isize;
}
unsafe extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
unsafe extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chown(__file: *const ::std::os::raw::c_char, __owner: __uid_t, __group: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchown(__fd: ::std::os::raw::c_int, __owner: __uid_t, __group: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lchown(__file: *const ::std::os::raw::c_char, __owner: __uid_t, __group: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchownat(__fd: ::std::os::raw::c_int, __file: *const ::std::os::raw::c_char, __owner: __uid_t, __group: __gid_t, __flag: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn execve(__path: *const ::std::os::raw::c_char, __argv: *const *mut ::std::os::raw::c_char, __envp: *const *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fexecve(__fd: ::std::os::raw::c_int, __argv: *const *mut ::std::os::raw::c_char, __envp: *const *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execv(__path: *const ::std::os::raw::c_char, __argv: *const *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execle(__path: *const ::std::os::raw::c_char, __arg: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execl(__path: *const ::std::os::raw::c_char, __arg: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execvp(__file: *const ::std::os::raw::c_char, __argv: *const *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn execlp(__file: *const ::std::os::raw::c_char, __arg: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_1 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_1 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_1 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = 7;
pub const _PC_VDISABLE: _bindgen_ty_1 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_1 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_1 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = 20;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_2 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_2 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = 10;
pub const _SC_TIMERS: _bindgen_ty_2 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = 14;
pub const _SC_FSYNC: _bindgen_ty_2 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_2 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_2 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = 28;
pub const _SC_VERSION: _bindgen_ty_2 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_2 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_2 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = 45;
pub const _SC_2_VERSION: _bindgen_ty_2 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_2 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_2 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = 52;
pub const _SC_PII: _bindgen_ty_2 = 53;
pub const _SC_PII_XTI: _bindgen_ty_2 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = 56;
pub const _SC_PII_OSI: _bindgen_ty_2 = 57;
pub const _SC_POLL: _bindgen_ty_2 = 58;
pub const _SC_SELECT: _bindgen_ty_2 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_2 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = 66;
pub const _SC_THREADS: _bindgen_ty_2 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_2 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = 96;
pub const _SC_2_UPE: _bindgen_ty_2 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = 103;
pub const _SC_INT_MAX: _bindgen_ty_2 = 104;
pub const _SC_INT_MIN: _bindgen_ty_2 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_2 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_2 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = 108;
pub const _SC_NZERO: _bindgen_ty_2 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_2 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_2 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = 132;
pub const _SC_BARRIERS: _bindgen_ty_2 = 133;
pub const _SC_BASE: _bindgen_ty_2 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = 137;
pub const _SC_CPUTIME: _bindgen_ty_2 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_2 = 143;
pub const _SC_FIFO: _bindgen_ty_2 = 144;
pub const _SC_PIPE: _bindgen_ty_2 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = 151;
pub const _SC_NETWORKING: _bindgen_ty_2 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = 154;
pub const _SC_REGEXP: _bindgen_ty_2 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = 156;
pub const _SC_SHELL: _bindgen_ty_2 = 157;
pub const _SC_SIGNALS: _bindgen_ty_2 = 158;
pub const _SC_SPAWN: _bindgen_ty_2 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = 167;
pub const _SC_2_PBS: _bindgen_ty_2 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = 173;
pub const _SC_STREAMS: _bindgen_ty_2 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = 180;
pub const _SC_TRACE: _bindgen_ty_2 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = 199;
pub const _SC_IPV6: _bindgen_ty_2 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_2 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_2 = 250;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_3 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_3 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_3 = 1149;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn pathconf(__path: *const ::std::os::raw::c_char, __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn fpathconf(__fd: ::std::os::raw::c_int, __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn confstr(__name: ::std::os::raw::c_int, __buf: *mut ::std::os::raw::c_char, __len: usize) -> usize;
}
unsafe extern "C" {
    pub fn getpid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getppid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getpgrp() -> __pid_t;
}
unsafe extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsid() -> __pid_t;
}
unsafe extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
unsafe extern "C" {
    pub fn getuid() -> __uid_t;
}
unsafe extern "C" {
    pub fn geteuid() -> __uid_t;
}
unsafe extern "C" {
    pub fn getgid() -> __gid_t;
}
unsafe extern "C" {
    pub fn getegid() -> __gid_t;
}
unsafe extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fork() -> __pid_t;
}
unsafe extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ttyname_r(__fd: ::std::os::raw::c_int, __buf: *mut ::std::os::raw::c_char, __buflen: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn link(__from: *const ::std::os::raw::c_char, __to: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int, __from: *const ::std::os::raw::c_char, __tofd: ::std::os::raw::c_int, __to: *const ::std::os::raw::c_char, __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn symlink(__from: *const ::std::os::raw::c_char, __to: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn readlink(__path: *const ::std::os::raw::c_char, __buf: *mut ::std::os::raw::c_char, __len: usize) -> isize;
}
unsafe extern "C" {
    pub fn symlinkat(__from: *const ::std::os::raw::c_char, __tofd: ::std::os::raw::c_int, __to: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn readlinkat(__fd: ::std::os::raw::c_int, __path: *const ::std::os::raw::c_char, __buf: *mut ::std::os::raw::c_char, __len: usize) -> isize;
}
unsafe extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlinkat(__fd: ::std::os::raw::c_int, __name: *const ::std::os::raw::c_char, __flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
unsafe extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getlogin_r(__name: *mut ::std::os::raw::c_char, __name_len: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getopt(___argc: ::std::os::raw::c_int, ___argv: *const *mut ::std::os::raw::c_char, __shortopts: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sethostname(__name: *const ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdomainname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setdomainname(__name: *const ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn profil(__sample_buffer: *mut ::std::os::raw::c_ushort, __size: usize, __offset: usize, __scale: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn endusershell();
}
unsafe extern "C" {
    pub fn setusershell();
}
unsafe extern "C" {
    pub fn daemon(__nochdir: ::std::os::raw::c_int, __noclose: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn sync();
}
unsafe extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn truncate(__file: *const ::std::os::raw::c_char, __length: __off_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn lockf(__fd: ::std::os::raw::c_int, __cmd: ::std::os::raw::c_int, __len: __off_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn crypt(__key: *const ::std::os::raw::c_char, __salt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getentropy(__buffer: *mut ::std::os::raw::c_void, __length: usize) -> ::std::os::raw::c_int;
}
pub type dds_time_t = i64;
pub type dds_duration_t = i64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ddsrt_mtime_t {
    pub v: dds_time_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ddsrt_wctime_t {
    pub v: dds_time_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ddsrt_etime_t {
    pub v: dds_time_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ddsrt_hrtime_t {
    pub v: u64,
}
unsafe extern "C" {
    pub fn dds_time() -> dds_time_t;
}
unsafe extern "C" {
    pub fn dds_sleepfor(reltime: dds_duration_t);
}
unsafe extern "C" {
    pub fn ddsrt_time_wallclock() -> ddsrt_wctime_t;
}
unsafe extern "C" {
    pub fn ddsrt_time_monotonic() -> ddsrt_mtime_t;
}
unsafe extern "C" {
    pub fn ddsrt_time_elapsed() -> ddsrt_etime_t;
}
unsafe extern "C" {
    pub fn ddsrt_time_highres() -> ddsrt_hrtime_t;
}
unsafe extern "C" {
    pub fn ddsrt_ctime(abstime: dds_time_t, str_: *mut ::std::os::raw::c_char, size: usize) -> usize;
}
unsafe extern "C" {
    pub fn ddsrt_mtime_to_sec_usec(sec: *mut i32, usec: *mut i32, t: ddsrt_mtime_t);
}
unsafe extern "C" {
    pub fn ddsrt_wctime_to_sec_usec(sec: *mut i32, usec: *mut i32, t: ddsrt_wctime_t);
}
unsafe extern "C" {
    pub fn ddsrt_etime_to_sec_usec(sec: *mut i32, usec: *mut i32, t: ddsrt_etime_t);
}
pub type dds_return_t = i32;
unsafe extern "C" {
    pub fn dds_strretcode(ret: dds_return_t) -> *const ::std::os::raw::c_char;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl Default for _IO_FILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cookie_read_function_t =
    ::std::option::Option<unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void, __buf: *mut ::std::os::raw::c_char, __nbytes: usize) -> __ssize_t>;
pub type cookie_write_function_t =
    ::std::option::Option<unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void, __buf: *const ::std::os::raw::c_char, __nbytes: usize) -> __ssize_t>;
pub type cookie_seek_function_t =
    ::std::option::Option<unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void, __pos: *mut __off64_t, __w: ::std::os::raw::c_int) -> ::std::os::raw::c_int>;
pub type cookie_close_function_t = ::std::option::Option<unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char, __new: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int, __old: *const ::std::os::raw::c_char, __newfd: ::std::os::raw::c_int, __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char, __pfx: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char, __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char, __modes: *const ::std::os::raw::c_char, __stream: *mut FILE) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fopencookie(__magic_cookie: *mut ::std::os::raw::c_void, __modes: *const ::std::os::raw::c_char, __io_funcs: cookie_io_functions_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize, __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char, __sizeloc: *mut usize) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __modes: ::std::os::raw::c_int, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(__stream: *mut FILE, __format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char, __format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char, __format: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: ::std::os::raw::c_ulong, __format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char, __maxlen: ::std::os::raw::c_ulong, __format: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(__ptr: *mut *mut ::std::os::raw::c_char, __f: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __asprintf(__ptr: *mut *mut ::std::os::raw::c_char, __fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asprintf(__ptr: *mut *mut ::std::os::raw::c_char, __fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int, __fmt: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int, __fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(__stream: *mut FILE, __format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char, __format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE, __format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(__s: *const ::std::os::raw::c_char, __format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char, __format: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(__s: *mut FILE, __format: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(__s: *const ::std::os::raw::c_char, __format: *const ::std::os::raw::c_char, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int, __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char, __n: *mut usize, __delimiter: ::std::os::raw::c_int, __stream: *mut FILE) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char, __n: *mut usize, __delimiter: ::std::os::raw::c_int, __stream: *mut FILE) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char, __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: ::std::os::raw::c_ulong, __n: ::std::os::raw::c_ulong, __stream: *mut FILE) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: ::std::os::raw::c_ulong, __n: ::std::os::raw::c_ulong, __s: *mut FILE) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize, __n: usize, __stream: *mut FILE) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void, __size: usize, __n: usize, __stream: *mut FILE) -> usize;
}
unsafe extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long, __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char, __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_log_data_t {
    pub priority: u32,
    pub domid: u32,
    pub file: *const ::std::os::raw::c_char,
    pub line: u32,
    pub function: *const ::std::os::raw::c_char,
    pub message: *const ::std::os::raw::c_char,
    pub size: usize,
    pub hdrsize: usize,
}
impl Default for dds_log_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_log_write_fn_t = ::std::option::Option<unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, d: *const dds_log_data_t)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ddsrt_log_cfg_common {
    pub mask: u32,
    pub tracemask: u32,
    pub domid: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ddsrt_log_cfg {
    pub c: ddsrt_log_cfg_common,
    pub u: ddsrt_log_cfg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ddsrt_log_cfg__bindgen_ty_1 {
    pub fnptr: dds_log_write_fn_t,
    pub ptr: *mut ::std::os::raw::c_void,
    pub u32_: u32,
    pub pad: [::std::os::raw::c_uchar; 72usize],
}
impl Default for ddsrt_log_cfg__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ddsrt_log_cfg {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ddsrt_log_cfg_t = ddsrt_log_cfg;
unsafe extern "C" {
    pub static dds_log_mask: *mut u32;
}
unsafe extern "C" {
    pub fn dds_set_log_mask(cats: u32);
}
unsafe extern "C" {
    pub fn dds_set_log_file(file: *mut FILE);
}
unsafe extern "C" {
    pub fn dds_set_trace_file(file: *mut FILE);
}
unsafe extern "C" {
    pub fn dds_set_log_sink(callback: dds_log_write_fn_t, userdata: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn dds_set_trace_sink(callback: dds_log_write_fn_t, userdata: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn dds_log_cfg_init(cfg: *mut ddsrt_log_cfg, domid: u32, tracemask: u32, log_fp: *mut FILE, trace_fp: *mut FILE);
}
unsafe extern "C" {
    pub fn dds_log_cfg(
        cfg: *const ddsrt_log_cfg, cat: u32, file: *const ::std::os::raw::c_char, line: u32, func: *const ::std::os::raw::c_char, fmt: *const ::std::os::raw::c_char, ...
    );
}
unsafe extern "C" {
    pub fn dds_log_id(cat: u32, domid: u32, file: *const ::std::os::raw::c_char, line: u32, func: *const ::std::os::raw::c_char, fmt: *const ::std::os::raw::c_char, ...);
}
unsafe extern "C" {
    pub fn dds_log(cat: u32, file: *const ::std::os::raw::c_char, line: u32, func: *const ::std::os::raw::c_char, fmt: *const ::std::os::raw::c_char, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_cdrstream_allocator {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub static dds_cdrstream_default_allocator: dds_cdrstream_allocator;
}
pub const dds_free_op_t_DDS_FREE_ALL: dds_free_op_t = 7;
pub const dds_free_op_t_DDS_FREE_CONTENTS: dds_free_op_t = 3;
pub const dds_free_op_t_DDS_FREE_KEY: dds_free_op_t = 1;
pub type dds_free_op_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_allocator {
    pub malloc: ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>,
    pub realloc: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, size: usize) -> *mut ::std::os::raw::c_void>,
    pub free: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
}
pub type dds_allocator_t = dds_allocator;
unsafe extern "C" {
    pub fn dds_alloc(size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn dds_realloc(ptr: *mut ::std::os::raw::c_void, size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn dds_realloc_zero(ptr: *mut ::std::os::raw::c_void, size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn dds_free(ptr: *mut ::std::os::raw::c_void);
}
pub type dds_alloc_fn_t = ::std::option::Option<unsafe extern "C" fn(p: usize) -> *mut ::std::os::raw::c_void>;
pub type dds_realloc_fn_t = ::std::option::Option<unsafe extern "C" fn(a: *mut ::std::os::raw::c_void, b: usize) -> *mut ::std::os::raw::c_void>;
pub type dds_free_fn_t = ::std::option::Option<unsafe extern "C" fn(p: *mut ::std::os::raw::c_void)>;
unsafe extern "C" {
    pub fn dds_string_alloc(size: usize) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn dds_string_dup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn dds_string_free(str_: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn dds_sample_free(sample: *mut ::std::os::raw::c_void, desc: *const dds_topic_descriptor, op: dds_free_op_t);
}
pub const dds_stream_opcode_DDS_OP_RTS: dds_stream_opcode = 0;
pub const dds_stream_opcode_DDS_OP_ADR: dds_stream_opcode = 16777216;
pub const dds_stream_opcode_DDS_OP_JSR: dds_stream_opcode = 33554432;
pub const dds_stream_opcode_DDS_OP_JEQ: dds_stream_opcode = 50331648;
pub const dds_stream_opcode_DDS_OP_DLC: dds_stream_opcode = 67108864;
pub const dds_stream_opcode_DDS_OP_PLC: dds_stream_opcode = 83886080;
pub const dds_stream_opcode_DDS_OP_PLM: dds_stream_opcode = 100663296;
pub const dds_stream_opcode_DDS_OP_KOF: dds_stream_opcode = 117440512;
pub const dds_stream_opcode_DDS_OP_JEQ4: dds_stream_opcode = 134217728;
pub const dds_stream_opcode_DDS_OP_MID: dds_stream_opcode = 150994944;
pub type dds_stream_opcode = ::std::os::raw::c_uint;
pub const dds_stream_typecode_DDS_OP_VAL_1BY: dds_stream_typecode = 1;
pub const dds_stream_typecode_DDS_OP_VAL_2BY: dds_stream_typecode = 2;
pub const dds_stream_typecode_DDS_OP_VAL_4BY: dds_stream_typecode = 3;
pub const dds_stream_typecode_DDS_OP_VAL_8BY: dds_stream_typecode = 4;
pub const dds_stream_typecode_DDS_OP_VAL_STR: dds_stream_typecode = 5;
pub const dds_stream_typecode_DDS_OP_VAL_BST: dds_stream_typecode = 6;
pub const dds_stream_typecode_DDS_OP_VAL_SEQ: dds_stream_typecode = 7;
pub const dds_stream_typecode_DDS_OP_VAL_ARR: dds_stream_typecode = 8;
pub const dds_stream_typecode_DDS_OP_VAL_UNI: dds_stream_typecode = 9;
pub const dds_stream_typecode_DDS_OP_VAL_STU: dds_stream_typecode = 10;
pub const dds_stream_typecode_DDS_OP_VAL_BSQ: dds_stream_typecode = 11;
pub const dds_stream_typecode_DDS_OP_VAL_ENU: dds_stream_typecode = 12;
pub const dds_stream_typecode_DDS_OP_VAL_EXT: dds_stream_typecode = 13;
pub const dds_stream_typecode_DDS_OP_VAL_BLN: dds_stream_typecode = 14;
pub const dds_stream_typecode_DDS_OP_VAL_BMK: dds_stream_typecode = 15;
pub const dds_stream_typecode_DDS_OP_VAL_WSTR: dds_stream_typecode = 16;
pub const dds_stream_typecode_DDS_OP_VAL_BWSTR: dds_stream_typecode = 17;
pub const dds_stream_typecode_DDS_OP_VAL_WCHAR: dds_stream_typecode = 18;
pub type dds_stream_typecode = ::std::os::raw::c_uint;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_1BY: dds_stream_typecode_primary = 65536;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_2BY: dds_stream_typecode_primary = 131072;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_4BY: dds_stream_typecode_primary = 196608;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_8BY: dds_stream_typecode_primary = 262144;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_STR: dds_stream_typecode_primary = 327680;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_BST: dds_stream_typecode_primary = 393216;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_SEQ: dds_stream_typecode_primary = 458752;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_ARR: dds_stream_typecode_primary = 524288;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_UNI: dds_stream_typecode_primary = 589824;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_STU: dds_stream_typecode_primary = 655360;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_BSQ: dds_stream_typecode_primary = 720896;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_ENU: dds_stream_typecode_primary = 786432;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_EXT: dds_stream_typecode_primary = 851968;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_BLN: dds_stream_typecode_primary = 917504;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_BMK: dds_stream_typecode_primary = 983040;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_WSTR: dds_stream_typecode_primary = 1048576;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_BWSTR: dds_stream_typecode_primary = 1114112;
pub const dds_stream_typecode_primary_DDS_OP_TYPE_WCHAR: dds_stream_typecode_primary = 1179648;
pub type dds_stream_typecode_primary = ::std::os::raw::c_uint;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_1BY: dds_stream_typecode_subtype = 256;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_2BY: dds_stream_typecode_subtype = 512;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_4BY: dds_stream_typecode_subtype = 768;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_8BY: dds_stream_typecode_subtype = 1024;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_STR: dds_stream_typecode_subtype = 1280;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_BST: dds_stream_typecode_subtype = 1536;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_SEQ: dds_stream_typecode_subtype = 1792;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_ARR: dds_stream_typecode_subtype = 2048;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_UNI: dds_stream_typecode_subtype = 2304;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_STU: dds_stream_typecode_subtype = 2560;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_BSQ: dds_stream_typecode_subtype = 2816;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_ENU: dds_stream_typecode_subtype = 3072;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_BLN: dds_stream_typecode_subtype = 3584;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_BMK: dds_stream_typecode_subtype = 3840;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_WSTR: dds_stream_typecode_subtype = 4096;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_BWSTR: dds_stream_typecode_subtype = 4352;
pub const dds_stream_typecode_subtype_DDS_OP_SUBTYPE_WCHAR: dds_stream_typecode_subtype = 4608;
pub type dds_stream_typecode_subtype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_sequence {
    pub _maximum: u32,
    pub _length: u32,
    pub _buffer: *mut u8,
    pub _release: bool,
}
impl Default for dds_sequence {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_sequence_t = dds_sequence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_key_descriptor {
    pub m_name: *const ::std::os::raw::c_char,
    pub m_offset: u32,
    pub m_idx: u32,
}
impl Default for dds_key_descriptor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_key_descriptor_t = dds_key_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_type_meta_ser {
    pub data: *const ::std::os::raw::c_uchar,
    pub sz: u32,
}
impl Default for dds_type_meta_ser {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_topic_descriptor {
    pub m_size: u32,
    pub m_align: u32,
    pub m_flagset: u32,
    pub m_nkeys: u32,
    pub m_typename: *const ::std::os::raw::c_char,
    pub m_keys: *const dds_key_descriptor_t,
    pub m_nops: u32,
    pub m_ops: *const u32,
    pub m_meta: *const ::std::os::raw::c_char,
    pub type_information: dds_type_meta_ser,
    pub type_mapping: dds_type_meta_ser,
    pub restrict_data_representation: u32,
}
impl Default for dds_topic_descriptor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_topic_descriptor_t = dds_topic_descriptor;
pub const dds_entity_kind_DDS_KIND_DONTCARE: dds_entity_kind = 0;
pub const dds_entity_kind_DDS_KIND_TOPIC: dds_entity_kind = 1;
pub const dds_entity_kind_DDS_KIND_PARTICIPANT: dds_entity_kind = 2;
pub const dds_entity_kind_DDS_KIND_READER: dds_entity_kind = 3;
pub const dds_entity_kind_DDS_KIND_WRITER: dds_entity_kind = 4;
pub const dds_entity_kind_DDS_KIND_SUBSCRIBER: dds_entity_kind = 5;
pub const dds_entity_kind_DDS_KIND_PUBLISHER: dds_entity_kind = 6;
pub const dds_entity_kind_DDS_KIND_COND_READ: dds_entity_kind = 7;
pub const dds_entity_kind_DDS_KIND_COND_QUERY: dds_entity_kind = 8;
pub const dds_entity_kind_DDS_KIND_COND_GUARD: dds_entity_kind = 9;
pub const dds_entity_kind_DDS_KIND_WAITSET: dds_entity_kind = 10;
pub const dds_entity_kind_DDS_KIND_DOMAIN: dds_entity_kind = 11;
pub const dds_entity_kind_DDS_KIND_CYCLONEDDS: dds_entity_kind = 12;
pub type dds_entity_kind = ::std::os::raw::c_uint;
pub use self::dds_entity_kind as dds_entity_kind_t;
pub type dds_instance_handle_t = u64;
pub type dds_domainid_t = u32;
pub const dds_find_scope_DDS_FIND_SCOPE_GLOBAL: dds_find_scope = 0;
pub const dds_find_scope_DDS_FIND_SCOPE_LOCAL_DOMAIN: dds_find_scope = 1;
pub const dds_find_scope_DDS_FIND_SCOPE_PARTICIPANT: dds_find_scope = 2;
pub type dds_find_scope = ::std::os::raw::c_uint;
pub use self::dds_find_scope as dds_find_scope_t;
pub const dds_typeid_kind_DDS_TYPEID_MINIMAL: dds_typeid_kind = 0;
pub const dds_typeid_kind_DDS_TYPEID_COMPLETE: dds_typeid_kind = 1;
pub type dds_typeid_kind = ::std::os::raw::c_uint;
pub use self::dds_typeid_kind as dds_typeid_kind_t;
unsafe extern "C" {
    pub fn dds_write_set_batch(enable: bool);
}
pub const dds_qos_policy_id_DDS_INVALID_QOS_POLICY_ID: dds_qos_policy_id = 0;
pub const dds_qos_policy_id_DDS_USERDATA_QOS_POLICY_ID: dds_qos_policy_id = 1;
pub const dds_qos_policy_id_DDS_DURABILITY_QOS_POLICY_ID: dds_qos_policy_id = 2;
pub const dds_qos_policy_id_DDS_PRESENTATION_QOS_POLICY_ID: dds_qos_policy_id = 3;
pub const dds_qos_policy_id_DDS_DEADLINE_QOS_POLICY_ID: dds_qos_policy_id = 4;
pub const dds_qos_policy_id_DDS_LATENCYBUDGET_QOS_POLICY_ID: dds_qos_policy_id = 5;
pub const dds_qos_policy_id_DDS_OWNERSHIP_QOS_POLICY_ID: dds_qos_policy_id = 6;
pub const dds_qos_policy_id_DDS_OWNERSHIPSTRENGTH_QOS_POLICY_ID: dds_qos_policy_id = 7;
pub const dds_qos_policy_id_DDS_LIVELINESS_QOS_POLICY_ID: dds_qos_policy_id = 8;
pub const dds_qos_policy_id_DDS_TIMEBASEDFILTER_QOS_POLICY_ID: dds_qos_policy_id = 9;
pub const dds_qos_policy_id_DDS_PARTITION_QOS_POLICY_ID: dds_qos_policy_id = 10;
pub const dds_qos_policy_id_DDS_RELIABILITY_QOS_POLICY_ID: dds_qos_policy_id = 11;
pub const dds_qos_policy_id_DDS_DESTINATIONORDER_QOS_POLICY_ID: dds_qos_policy_id = 12;
pub const dds_qos_policy_id_DDS_HISTORY_QOS_POLICY_ID: dds_qos_policy_id = 13;
pub const dds_qos_policy_id_DDS_RESOURCELIMITS_QOS_POLICY_ID: dds_qos_policy_id = 14;
pub const dds_qos_policy_id_DDS_ENTITYFACTORY_QOS_POLICY_ID: dds_qos_policy_id = 15;
pub const dds_qos_policy_id_DDS_WRITERDATALIFECYCLE_QOS_POLICY_ID: dds_qos_policy_id = 16;
pub const dds_qos_policy_id_DDS_READERDATALIFECYCLE_QOS_POLICY_ID: dds_qos_policy_id = 17;
pub const dds_qos_policy_id_DDS_TOPICDATA_QOS_POLICY_ID: dds_qos_policy_id = 18;
pub const dds_qos_policy_id_DDS_GROUPDATA_QOS_POLICY_ID: dds_qos_policy_id = 19;
pub const dds_qos_policy_id_DDS_TRANSPORTPRIORITY_QOS_POLICY_ID: dds_qos_policy_id = 20;
pub const dds_qos_policy_id_DDS_LIFESPAN_QOS_POLICY_ID: dds_qos_policy_id = 21;
pub const dds_qos_policy_id_DDS_DURABILITYSERVICE_QOS_POLICY_ID: dds_qos_policy_id = 22;
pub const dds_qos_policy_id_DDS_PROPERTY_QOS_POLICY_ID: dds_qos_policy_id = 23;
pub const dds_qos_policy_id_DDS_TYPE_CONSISTENCY_ENFORCEMENT_QOS_POLICY_ID: dds_qos_policy_id = 24;
pub const dds_qos_policy_id_DDS_DATA_REPRESENTATION_QOS_POLICY_ID: dds_qos_policy_id = 25;
pub type dds_qos_policy_id = ::std::os::raw::c_uint;
pub use self::dds_qos_policy_id as dds_qos_policy_id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_qos {
    _unused: [u8; 0],
}
pub type dds_qos_t = dds_qos;
pub const dds_durability_kind_DDS_DURABILITY_VOLATILE: dds_durability_kind = 0;
pub const dds_durability_kind_DDS_DURABILITY_TRANSIENT_LOCAL: dds_durability_kind = 1;
pub const dds_durability_kind_DDS_DURABILITY_TRANSIENT: dds_durability_kind = 2;
pub const dds_durability_kind_DDS_DURABILITY_PERSISTENT: dds_durability_kind = 3;
pub type dds_durability_kind = ::std::os::raw::c_uint;
pub use self::dds_durability_kind as dds_durability_kind_t;
pub const dds_history_kind_DDS_HISTORY_KEEP_LAST: dds_history_kind = 0;
pub const dds_history_kind_DDS_HISTORY_KEEP_ALL: dds_history_kind = 1;
pub type dds_history_kind = ::std::os::raw::c_uint;
pub use self::dds_history_kind as dds_history_kind_t;
pub const dds_ownership_kind_DDS_OWNERSHIP_SHARED: dds_ownership_kind = 0;
pub const dds_ownership_kind_DDS_OWNERSHIP_EXCLUSIVE: dds_ownership_kind = 1;
pub type dds_ownership_kind = ::std::os::raw::c_uint;
pub use self::dds_ownership_kind as dds_ownership_kind_t;
pub const dds_liveliness_kind_DDS_LIVELINESS_AUTOMATIC: dds_liveliness_kind = 0;
pub const dds_liveliness_kind_DDS_LIVELINESS_MANUAL_BY_PARTICIPANT: dds_liveliness_kind = 1;
pub const dds_liveliness_kind_DDS_LIVELINESS_MANUAL_BY_TOPIC: dds_liveliness_kind = 2;
pub type dds_liveliness_kind = ::std::os::raw::c_uint;
pub use self::dds_liveliness_kind as dds_liveliness_kind_t;
pub const dds_reliability_kind_DDS_RELIABILITY_BEST_EFFORT: dds_reliability_kind = 0;
pub const dds_reliability_kind_DDS_RELIABILITY_RELIABLE: dds_reliability_kind = 1;
pub type dds_reliability_kind = ::std::os::raw::c_uint;
pub use self::dds_reliability_kind as dds_reliability_kind_t;
pub const dds_destination_order_kind_DDS_DESTINATIONORDER_BY_RECEPTION_TIMESTAMP: dds_destination_order_kind = 0;
pub const dds_destination_order_kind_DDS_DESTINATIONORDER_BY_SOURCE_TIMESTAMP: dds_destination_order_kind = 1;
pub type dds_destination_order_kind = ::std::os::raw::c_uint;
pub use self::dds_destination_order_kind as dds_destination_order_kind_t;
pub const dds_presentation_access_scope_kind_DDS_PRESENTATION_INSTANCE: dds_presentation_access_scope_kind = 0;
pub const dds_presentation_access_scope_kind_DDS_PRESENTATION_TOPIC: dds_presentation_access_scope_kind = 1;
pub const dds_presentation_access_scope_kind_DDS_PRESENTATION_GROUP: dds_presentation_access_scope_kind = 2;
pub type dds_presentation_access_scope_kind = ::std::os::raw::c_uint;
pub use self::dds_presentation_access_scope_kind as dds_presentation_access_scope_kind_t;
pub const dds_ignorelocal_kind_DDS_IGNORELOCAL_NONE: dds_ignorelocal_kind = 0;
pub const dds_ignorelocal_kind_DDS_IGNORELOCAL_PARTICIPANT: dds_ignorelocal_kind = 1;
pub const dds_ignorelocal_kind_DDS_IGNORELOCAL_PROCESS: dds_ignorelocal_kind = 2;
pub type dds_ignorelocal_kind = ::std::os::raw::c_uint;
pub use self::dds_ignorelocal_kind as dds_ignorelocal_kind_t;
pub const dds_type_consistency_kind_DDS_TYPE_CONSISTENCY_DISALLOW_TYPE_COERCION: dds_type_consistency_kind = 0;
pub const dds_type_consistency_kind_DDS_TYPE_CONSISTENCY_ALLOW_TYPE_COERCION: dds_type_consistency_kind = 1;
pub type dds_type_consistency_kind = ::std::os::raw::c_uint;
pub use self::dds_type_consistency_kind as dds_type_consistency_kind_t;
pub type dds_data_representation_id_t = i16;
unsafe extern "C" {
    pub fn dds_create_qos() -> *mut dds_qos_t;
}
unsafe extern "C" {
    pub fn dds_delete_qos(qos: *mut dds_qos_t);
}
unsafe extern "C" {
    pub fn dds_reset_qos(qos: *mut dds_qos_t);
}
unsafe extern "C" {
    pub fn dds_copy_qos(dst: *mut dds_qos_t, src: *const dds_qos_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_merge_qos(dst: *mut dds_qos_t, src: *const dds_qos_t);
}
unsafe extern "C" {
    pub fn dds_qos_equal(a: *const dds_qos_t, b: *const dds_qos_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qset_userdata(qos: *mut dds_qos_t, value: *const ::std::os::raw::c_void, sz: usize);
}
unsafe extern "C" {
    pub fn dds_qset_topicdata(qos: *mut dds_qos_t, value: *const ::std::os::raw::c_void, sz: usize);
}
unsafe extern "C" {
    pub fn dds_qset_groupdata(qos: *mut dds_qos_t, value: *const ::std::os::raw::c_void, sz: usize);
}
unsafe extern "C" {
    pub fn dds_qset_durability(qos: *mut dds_qos_t, kind: dds_durability_kind_t);
}
unsafe extern "C" {
    pub fn dds_qset_history(qos: *mut dds_qos_t, kind: dds_history_kind_t, depth: i32);
}
unsafe extern "C" {
    pub fn dds_qset_resource_limits(qos: *mut dds_qos_t, max_samples: i32, max_instances: i32, max_samples_per_instance: i32);
}
unsafe extern "C" {
    pub fn dds_qset_presentation(qos: *mut dds_qos_t, access_scope: dds_presentation_access_scope_kind_t, coherent_access: bool, ordered_access: bool);
}
unsafe extern "C" {
    pub fn dds_qset_lifespan(qos: *mut dds_qos_t, lifespan: dds_duration_t);
}
unsafe extern "C" {
    pub fn dds_qset_deadline(qos: *mut dds_qos_t, deadline: dds_duration_t);
}
unsafe extern "C" {
    pub fn dds_qset_latency_budget(qos: *mut dds_qos_t, duration: dds_duration_t);
}
unsafe extern "C" {
    pub fn dds_qset_ownership(qos: *mut dds_qos_t, kind: dds_ownership_kind_t);
}
unsafe extern "C" {
    pub fn dds_qset_ownership_strength(qos: *mut dds_qos_t, value: i32);
}
unsafe extern "C" {
    pub fn dds_qset_liveliness(qos: *mut dds_qos_t, kind: dds_liveliness_kind_t, lease_duration: dds_duration_t);
}
unsafe extern "C" {
    pub fn dds_qset_time_based_filter(qos: *mut dds_qos_t, minimum_separation: dds_duration_t);
}
unsafe extern "C" {
    pub fn dds_qset_partition(qos: *mut dds_qos_t, n: u32, ps: *mut *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn dds_qset_partition1(qos: *mut dds_qos_t, name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn dds_qset_reliability(qos: *mut dds_qos_t, kind: dds_reliability_kind_t, max_blocking_time: dds_duration_t);
}
unsafe extern "C" {
    pub fn dds_qset_transport_priority(qos: *mut dds_qos_t, value: i32);
}
unsafe extern "C" {
    pub fn dds_qset_destination_order(qos: *mut dds_qos_t, kind: dds_destination_order_kind_t);
}
unsafe extern "C" {
    pub fn dds_qset_writer_data_lifecycle(qos: *mut dds_qos_t, autodispose: bool);
}
unsafe extern "C" {
    pub fn dds_qset_reader_data_lifecycle(qos: *mut dds_qos_t, autopurge_nowriter_samples_delay: dds_duration_t, autopurge_disposed_samples_delay: dds_duration_t);
}
unsafe extern "C" {
    pub fn dds_qset_writer_batching(qos: *mut dds_qos_t, batch_updates: bool);
}
unsafe extern "C" {
    pub fn dds_qset_durability_service(
        qos: *mut dds_qos_t, service_cleanup_delay: dds_duration_t, history_kind: dds_history_kind_t, history_depth: i32, max_samples: i32, max_instances: i32,
        max_samples_per_instance: i32,
    );
}
unsafe extern "C" {
    pub fn dds_qset_ignorelocal(qos: *mut dds_qos_t, ignore: dds_ignorelocal_kind_t);
}
unsafe extern "C" {
    pub fn dds_qset_prop(qos: *mut dds_qos_t, name: *const ::std::os::raw::c_char, value: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn dds_qunset_prop(qos: *mut dds_qos_t, name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn dds_qset_bprop(qos: *mut dds_qos_t, name: *const ::std::os::raw::c_char, value: *const ::std::os::raw::c_void, sz: usize);
}
unsafe extern "C" {
    pub fn dds_qunset_bprop(qos: *mut dds_qos_t, name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn dds_qset_type_consistency(
        qos: *mut dds_qos_t, kind: dds_type_consistency_kind_t, ignore_sequence_bounds: bool, ignore_string_bounds: bool, ignore_member_names: bool, prevent_type_widening: bool,
        force_type_validation: bool,
    );
}
unsafe extern "C" {
    pub fn dds_qset_data_representation(qos: *mut dds_qos_t, n: u32, values: *const dds_data_representation_id_t);
}
unsafe extern "C" {
    pub fn dds_qset_entity_name(qos: *mut dds_qos_t, name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn dds_qset_psmx_instances(qos: *mut dds_qos_t, n: u32, values: *mut *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn dds_qget_userdata(qos: *const dds_qos_t, value: *mut *mut ::std::os::raw::c_void, sz: *mut usize) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_topicdata(qos: *const dds_qos_t, value: *mut *mut ::std::os::raw::c_void, sz: *mut usize) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_groupdata(qos: *const dds_qos_t, value: *mut *mut ::std::os::raw::c_void, sz: *mut usize) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_durability(qos: *const dds_qos_t, kind: *mut dds_durability_kind_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_history(qos: *const dds_qos_t, kind: *mut dds_history_kind_t, depth: *mut i32) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_resource_limits(qos: *const dds_qos_t, max_samples: *mut i32, max_instances: *mut i32, max_samples_per_instance: *mut i32) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_presentation(qos: *const dds_qos_t, access_scope: *mut dds_presentation_access_scope_kind_t, coherent_access: *mut bool, ordered_access: *mut bool) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_lifespan(qos: *const dds_qos_t, lifespan: *mut dds_duration_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_deadline(qos: *const dds_qos_t, deadline: *mut dds_duration_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_latency_budget(qos: *const dds_qos_t, duration: *mut dds_duration_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_ownership(qos: *const dds_qos_t, kind: *mut dds_ownership_kind_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_ownership_strength(qos: *const dds_qos_t, value: *mut i32) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_liveliness(qos: *const dds_qos_t, kind: *mut dds_liveliness_kind_t, lease_duration: *mut dds_duration_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_time_based_filter(qos: *const dds_qos_t, minimum_separation: *mut dds_duration_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_partition(qos: *const dds_qos_t, n: *mut u32, ps: *mut *mut *mut ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_reliability(qos: *const dds_qos_t, kind: *mut dds_reliability_kind_t, max_blocking_time: *mut dds_duration_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_transport_priority(qos: *const dds_qos_t, value: *mut i32) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_destination_order(qos: *const dds_qos_t, kind: *mut dds_destination_order_kind_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_writer_data_lifecycle(qos: *const dds_qos_t, autodispose: *mut bool) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_reader_data_lifecycle(
        qos: *const dds_qos_t, autopurge_nowriter_samples_delay: *mut dds_duration_t, autopurge_disposed_samples_delay: *mut dds_duration_t,
    ) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_writer_batching(qos: *const dds_qos_t, batch_updates: *mut bool) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_durability_service(
        qos: *const dds_qos_t, service_cleanup_delay: *mut dds_duration_t, history_kind: *mut dds_history_kind_t, history_depth: *mut i32, max_samples: *mut i32,
        max_instances: *mut i32, max_samples_per_instance: *mut i32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_ignorelocal(qos: *const dds_qos_t, ignore: *mut dds_ignorelocal_kind_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_propnames(qos: *const dds_qos_t, n: *mut u32, names: *mut *mut *mut ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_prop(qos: *const dds_qos_t, name: *const ::std::os::raw::c_char, value: *mut *mut ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_bpropnames(qos: *const dds_qos_t, n: *mut u32, names: *mut *mut *mut ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_bprop(qos: *const dds_qos_t, name: *const ::std::os::raw::c_char, value: *mut *mut ::std::os::raw::c_void, sz: *mut usize) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_type_consistency(
        qos: *const dds_qos_t, kind: *mut dds_type_consistency_kind_t, ignore_sequence_bounds: *mut bool, ignore_string_bounds: *mut bool, ignore_member_names: *mut bool,
        prevent_type_widening: *mut bool, force_type_validation: *mut bool,
    ) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_data_representation(qos: *const dds_qos_t, n: *mut u32, values: *mut *mut dds_data_representation_id_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_entity_name(qos: *const dds_qos_t, name: *mut *mut ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn dds_qget_psmx_instances(qos: *const dds_qos_t, n_out: *mut u32, values: *mut *mut *mut ::std::os::raw::c_char) -> bool;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_offered_deadline_missed_status {
    pub total_count: u32,
    pub total_count_change: i32,
    pub last_instance_handle: dds_instance_handle_t,
}
pub type dds_offered_deadline_missed_status_t = dds_offered_deadline_missed_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_offered_incompatible_qos_status {
    pub total_count: u32,
    pub total_count_change: i32,
    pub last_policy_id: u32,
}
pub type dds_offered_incompatible_qos_status_t = dds_offered_incompatible_qos_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_publication_matched_status {
    pub total_count: u32,
    pub total_count_change: i32,
    pub current_count: u32,
    pub current_count_change: i32,
    pub last_subscription_handle: dds_instance_handle_t,
}
pub type dds_publication_matched_status_t = dds_publication_matched_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_liveliness_lost_status {
    pub total_count: u32,
    pub total_count_change: i32,
}
pub type dds_liveliness_lost_status_t = dds_liveliness_lost_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_subscription_matched_status {
    pub total_count: u32,
    pub total_count_change: i32,
    pub current_count: u32,
    pub current_count_change: i32,
    pub last_publication_handle: dds_instance_handle_t,
}
pub type dds_subscription_matched_status_t = dds_subscription_matched_status;
pub const dds_sample_rejected_status_kind_DDS_NOT_REJECTED: dds_sample_rejected_status_kind = 0;
pub const dds_sample_rejected_status_kind_DDS_REJECTED_BY_INSTANCES_LIMIT: dds_sample_rejected_status_kind = 1;
pub const dds_sample_rejected_status_kind_DDS_REJECTED_BY_SAMPLES_LIMIT: dds_sample_rejected_status_kind = 2;
pub const dds_sample_rejected_status_kind_DDS_REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT: dds_sample_rejected_status_kind = 3;
pub type dds_sample_rejected_status_kind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_sample_rejected_status {
    pub total_count: u32,
    pub total_count_change: i32,
    pub last_reason: dds_sample_rejected_status_kind,
    pub last_instance_handle: dds_instance_handle_t,
}
impl Default for dds_sample_rejected_status {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_sample_rejected_status_t = dds_sample_rejected_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_liveliness_changed_status {
    pub alive_count: u32,
    pub not_alive_count: u32,
    pub alive_count_change: i32,
    pub not_alive_count_change: i32,
    pub last_publication_handle: dds_instance_handle_t,
}
pub type dds_liveliness_changed_status_t = dds_liveliness_changed_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_requested_deadline_missed_status {
    pub total_count: u32,
    pub total_count_change: i32,
    pub last_instance_handle: dds_instance_handle_t,
}
pub type dds_requested_deadline_missed_status_t = dds_requested_deadline_missed_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_requested_incompatible_qos_status {
    pub total_count: u32,
    pub total_count_change: i32,
    pub last_policy_id: u32,
}
pub type dds_requested_incompatible_qos_status_t = dds_requested_incompatible_qos_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_sample_lost_status {
    pub total_count: u32,
    pub total_count_change: i32,
}
pub type dds_sample_lost_status_t = dds_sample_lost_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_inconsistent_topic_status {
    pub total_count: u32,
    pub total_count_change: i32,
}
pub type dds_inconsistent_topic_status_t = dds_inconsistent_topic_status;
unsafe extern "C" {
    pub fn dds_get_inconsistent_topic_status(topic: dds_entity_t, status: *mut dds_inconsistent_topic_status_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_publication_matched_status(writer: dds_entity_t, status: *mut dds_publication_matched_status_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_liveliness_lost_status(writer: dds_entity_t, status: *mut dds_liveliness_lost_status_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_offered_deadline_missed_status(writer: dds_entity_t, status: *mut dds_offered_deadline_missed_status_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_offered_incompatible_qos_status(writer: dds_entity_t, status: *mut dds_offered_incompatible_qos_status_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_subscription_matched_status(reader: dds_entity_t, status: *mut dds_subscription_matched_status_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_liveliness_changed_status(reader: dds_entity_t, status: *mut dds_liveliness_changed_status_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_sample_rejected_status(reader: dds_entity_t, status: *mut dds_sample_rejected_status_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_sample_lost_status(reader: dds_entity_t, status: *mut dds_sample_lost_status_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_requested_deadline_missed_status(reader: dds_entity_t, status: *mut dds_requested_deadline_missed_status_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_requested_incompatible_qos_status(reader: dds_entity_t, status: *mut dds_requested_incompatible_qos_status_t) -> dds_return_t;
}
pub type dds_on_inconsistent_topic_fn = ::std::option::Option<unsafe extern "C" fn(topic: dds_entity_t, status: dds_inconsistent_topic_status_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_liveliness_lost_fn = ::std::option::Option<unsafe extern "C" fn(writer: dds_entity_t, status: dds_liveliness_lost_status_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_offered_deadline_missed_fn =
    ::std::option::Option<unsafe extern "C" fn(writer: dds_entity_t, status: dds_offered_deadline_missed_status_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_offered_incompatible_qos_fn =
    ::std::option::Option<unsafe extern "C" fn(writer: dds_entity_t, status: dds_offered_incompatible_qos_status_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_data_on_readers_fn = ::std::option::Option<unsafe extern "C" fn(subscriber: dds_entity_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_sample_lost_fn = ::std::option::Option<unsafe extern "C" fn(reader: dds_entity_t, status: dds_sample_lost_status_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_data_available_fn = ::std::option::Option<unsafe extern "C" fn(reader: dds_entity_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_sample_rejected_fn = ::std::option::Option<unsafe extern "C" fn(reader: dds_entity_t, status: dds_sample_rejected_status_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_liveliness_changed_fn =
    ::std::option::Option<unsafe extern "C" fn(reader: dds_entity_t, status: dds_liveliness_changed_status_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_requested_deadline_missed_fn =
    ::std::option::Option<unsafe extern "C" fn(reader: dds_entity_t, status: dds_requested_deadline_missed_status_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_requested_incompatible_qos_fn =
    ::std::option::Option<unsafe extern "C" fn(reader: dds_entity_t, status: dds_requested_incompatible_qos_status_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_publication_matched_fn =
    ::std::option::Option<unsafe extern "C" fn(writer: dds_entity_t, status: dds_publication_matched_status_t, arg: *mut ::std::os::raw::c_void)>;
pub type dds_on_subscription_matched_fn =
    ::std::option::Option<unsafe extern "C" fn(reader: dds_entity_t, status: dds_subscription_matched_status_t, arg: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_listener {
    _unused: [u8; 0],
}
pub type dds_listener_t = dds_listener;
unsafe extern "C" {
    pub fn dds_create_listener(arg: *mut ::std::os::raw::c_void) -> *mut dds_listener_t;
}
unsafe extern "C" {
    pub fn dds_delete_listener(listener: *mut dds_listener_t);
}
unsafe extern "C" {
    pub fn dds_reset_listener(listener: *mut dds_listener_t);
}
unsafe extern "C" {
    pub fn dds_copy_listener(dst: *mut dds_listener_t, src: *const dds_listener_t);
}
unsafe extern "C" {
    pub fn dds_merge_listener(dst: *mut dds_listener_t, src: *const dds_listener_t);
}
unsafe extern "C" {
    pub fn dds_lset_data_available_arg(listener: *mut dds_listener_t, callback: dds_on_data_available_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_data_on_readers_arg(
        listener: *mut dds_listener_t, callback: dds_on_data_on_readers_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_inconsistent_topic_arg(
        listener: *mut dds_listener_t, callback: dds_on_inconsistent_topic_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_liveliness_changed_arg(
        listener: *mut dds_listener_t, callback: dds_on_liveliness_changed_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_liveliness_lost_arg(
        listener: *mut dds_listener_t, callback: dds_on_liveliness_lost_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_offered_deadline_missed_arg(
        listener: *mut dds_listener_t, callback: dds_on_offered_deadline_missed_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_offered_incompatible_qos_arg(
        listener: *mut dds_listener_t, callback: dds_on_offered_incompatible_qos_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_publication_matched_arg(
        listener: *mut dds_listener_t, callback: dds_on_publication_matched_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_requested_deadline_missed_arg(
        listener: *mut dds_listener_t, callback: dds_on_requested_deadline_missed_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_requested_incompatible_qos_arg(
        listener: *mut dds_listener_t, callback: dds_on_requested_incompatible_qos_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_sample_lost_arg(listener: *mut dds_listener_t, callback: dds_on_sample_lost_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_sample_rejected_arg(
        listener: *mut dds_listener_t, callback: dds_on_sample_rejected_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_subscription_matched_arg(
        listener: *mut dds_listener_t, callback: dds_on_subscription_matched_fn, arg: *mut ::std::os::raw::c_void, reset_on_invoke: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lset_inconsistent_topic(listener: *mut dds_listener_t, callback: dds_on_inconsistent_topic_fn);
}
unsafe extern "C" {
    pub fn dds_lset_liveliness_lost(listener: *mut dds_listener_t, callback: dds_on_liveliness_lost_fn);
}
unsafe extern "C" {
    pub fn dds_lset_offered_deadline_missed(listener: *mut dds_listener_t, callback: dds_on_offered_deadline_missed_fn);
}
unsafe extern "C" {
    pub fn dds_lset_offered_incompatible_qos(listener: *mut dds_listener_t, callback: dds_on_offered_incompatible_qos_fn);
}
unsafe extern "C" {
    pub fn dds_lset_data_on_readers(listener: *mut dds_listener_t, callback: dds_on_data_on_readers_fn);
}
unsafe extern "C" {
    pub fn dds_lset_sample_lost(listener: *mut dds_listener_t, callback: dds_on_sample_lost_fn);
}
unsafe extern "C" {
    pub fn dds_lset_data_available(listener: *mut dds_listener_t, callback: dds_on_data_available_fn);
}
unsafe extern "C" {
    pub fn dds_lset_sample_rejected(listener: *mut dds_listener_t, callback: dds_on_sample_rejected_fn);
}
unsafe extern "C" {
    pub fn dds_lset_liveliness_changed(listener: *mut dds_listener_t, callback: dds_on_liveliness_changed_fn);
}
unsafe extern "C" {
    pub fn dds_lset_requested_deadline_missed(listener: *mut dds_listener_t, callback: dds_on_requested_deadline_missed_fn);
}
unsafe extern "C" {
    pub fn dds_lset_requested_incompatible_qos(listener: *mut dds_listener_t, callback: dds_on_requested_incompatible_qos_fn);
}
unsafe extern "C" {
    pub fn dds_lset_publication_matched(listener: *mut dds_listener_t, callback: dds_on_publication_matched_fn);
}
unsafe extern "C" {
    pub fn dds_lset_subscription_matched(listener: *mut dds_listener_t, callback: dds_on_subscription_matched_fn);
}
unsafe extern "C" {
    pub fn dds_lget_data_available_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_data_available_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_data_on_readers_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_data_on_readers_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_inconsistent_topic_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_inconsistent_topic_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_liveliness_changed_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_liveliness_changed_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_liveliness_lost_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_liveliness_lost_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_offered_deadline_missed_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_offered_deadline_missed_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_offered_incompatible_qos_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_offered_incompatible_qos_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_publication_matched_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_publication_matched_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_requested_deadline_missed_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_requested_deadline_missed_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_requested_incompatible_qos_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_requested_incompatible_qos_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_sample_lost_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_sample_lost_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_sample_rejected_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_sample_rejected_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_subscription_matched_arg(
        listener: *const dds_listener_t, callback: *mut dds_on_subscription_matched_fn, arg: *mut *mut ::std::os::raw::c_void, reset_on_invoke: *mut bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lget_inconsistent_topic(listener: *const dds_listener_t, callback: *mut dds_on_inconsistent_topic_fn);
}
unsafe extern "C" {
    pub fn dds_lget_liveliness_lost(listener: *const dds_listener_t, callback: *mut dds_on_liveliness_lost_fn);
}
unsafe extern "C" {
    pub fn dds_lget_offered_deadline_missed(listener: *const dds_listener_t, callback: *mut dds_on_offered_deadline_missed_fn);
}
unsafe extern "C" {
    pub fn dds_lget_offered_incompatible_qos(listener: *const dds_listener_t, callback: *mut dds_on_offered_incompatible_qos_fn);
}
unsafe extern "C" {
    pub fn dds_lget_data_on_readers(listener: *const dds_listener_t, callback: *mut dds_on_data_on_readers_fn);
}
unsafe extern "C" {
    pub fn dds_lget_sample_lost(listener: *const dds_listener_t, callback: *mut dds_on_sample_lost_fn);
}
unsafe extern "C" {
    pub fn dds_lget_data_available(listener: *const dds_listener_t, callback: *mut dds_on_data_available_fn);
}
unsafe extern "C" {
    pub fn dds_lget_sample_rejected(listener: *const dds_listener_t, callback: *mut dds_on_sample_rejected_fn);
}
unsafe extern "C" {
    pub fn dds_lget_liveliness_changed(listener: *const dds_listener_t, callback: *mut dds_on_liveliness_changed_fn);
}
unsafe extern "C" {
    pub fn dds_lget_requested_deadline_missed(listener: *const dds_listener_t, callback: *mut dds_on_requested_deadline_missed_fn);
}
unsafe extern "C" {
    pub fn dds_lget_requested_incompatible_qos(listener: *const dds_listener_t, callback: *mut dds_on_requested_incompatible_qos_fn);
}
unsafe extern "C" {
    pub fn dds_lget_publication_matched(listener: *const dds_listener_t, callback: *mut dds_on_publication_matched_fn);
}
unsafe extern "C" {
    pub fn dds_lget_subscription_matched(listener: *const dds_listener_t, callback: *mut dds_on_subscription_matched_fn);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ddsi_typeinfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_dynamic_type {
    pub x: [*mut ::std::os::raw::c_void; 2usize],
    pub ret: dds_return_t,
}
impl Default for dds_dynamic_type {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_dynamic_type_t = dds_dynamic_type;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_NONE: dds_dynamic_type_kind = 0;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_BOOLEAN: dds_dynamic_type_kind = 1;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_BYTE: dds_dynamic_type_kind = 2;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_INT16: dds_dynamic_type_kind = 3;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_INT32: dds_dynamic_type_kind = 4;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_INT64: dds_dynamic_type_kind = 5;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_UINT16: dds_dynamic_type_kind = 6;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_UINT32: dds_dynamic_type_kind = 7;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_UINT64: dds_dynamic_type_kind = 8;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_FLOAT32: dds_dynamic_type_kind = 9;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_FLOAT64: dds_dynamic_type_kind = 10;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_FLOAT128: dds_dynamic_type_kind = 11;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_INT8: dds_dynamic_type_kind = 12;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_UINT8: dds_dynamic_type_kind = 13;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_CHAR8: dds_dynamic_type_kind = 14;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_CHAR16: dds_dynamic_type_kind = 15;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_STRING8: dds_dynamic_type_kind = 16;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_STRING16: dds_dynamic_type_kind = 17;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_ENUMERATION: dds_dynamic_type_kind = 18;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_BITMASK: dds_dynamic_type_kind = 19;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_ALIAS: dds_dynamic_type_kind = 20;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_ARRAY: dds_dynamic_type_kind = 21;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_SEQUENCE: dds_dynamic_type_kind = 22;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_MAP: dds_dynamic_type_kind = 23;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_STRUCTURE: dds_dynamic_type_kind = 24;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_UNION: dds_dynamic_type_kind = 25;
pub const dds_dynamic_type_kind_DDS_DYNAMIC_BITSET: dds_dynamic_type_kind = 26;
pub type dds_dynamic_type_kind = ::std::os::raw::c_uint;
pub use self::dds_dynamic_type_kind as dds_dynamic_type_kind_t;
pub const dds_dynamic_type_spec_kind_DDS_DYNAMIC_TYPE_KIND_UNSET: dds_dynamic_type_spec_kind = 0;
pub const dds_dynamic_type_spec_kind_DDS_DYNAMIC_TYPE_KIND_DEFINITION: dds_dynamic_type_spec_kind = 1;
pub const dds_dynamic_type_spec_kind_DDS_DYNAMIC_TYPE_KIND_PRIMITIVE: dds_dynamic_type_spec_kind = 2;
pub type dds_dynamic_type_spec_kind = ::std::os::raw::c_uint;
pub use self::dds_dynamic_type_spec_kind as dds_dynamic_type_spec_kind_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dds_dynamic_type_spec {
    pub kind: dds_dynamic_type_spec_kind_t,
    pub type_: dds_dynamic_type_spec__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dds_dynamic_type_spec__bindgen_ty_1 {
    pub type_: dds_dynamic_type_t,
    pub primitive: dds_dynamic_type_kind_t,
}
impl Default for dds_dynamic_type_spec__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for dds_dynamic_type_spec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_dynamic_type_spec_t = dds_dynamic_type_spec;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dds_dynamic_type_descriptor {
    pub kind: dds_dynamic_type_kind_t,
    pub name: *const ::std::os::raw::c_char,
    pub base_type: dds_dynamic_type_spec_t,
    pub discriminator_type: dds_dynamic_type_spec_t,
    pub num_bounds: u32,
    pub bounds: *const u32,
    pub element_type: dds_dynamic_type_spec_t,
    pub key_element_type: dds_dynamic_type_spec_t,
}
impl Default for dds_dynamic_type_descriptor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_dynamic_type_descriptor_t = dds_dynamic_type_descriptor;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dds_dynamic_member_descriptor {
    pub name: *const ::std::os::raw::c_char,
    pub id: u32,
    pub type_: dds_dynamic_type_spec_t,
    pub default_value: *mut ::std::os::raw::c_char,
    pub index: u32,
    pub num_labels: u32,
    pub labels: *mut i32,
    pub default_label: bool,
}
impl Default for dds_dynamic_member_descriptor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_dynamic_member_descriptor_t = dds_dynamic_member_descriptor;
pub const dds_dynamic_type_extensibility_DDS_DYNAMIC_TYPE_EXT_FINAL: dds_dynamic_type_extensibility = 0;
pub const dds_dynamic_type_extensibility_DDS_DYNAMIC_TYPE_EXT_APPENDABLE: dds_dynamic_type_extensibility = 1;
pub const dds_dynamic_type_extensibility_DDS_DYNAMIC_TYPE_EXT_MUTABLE: dds_dynamic_type_extensibility = 2;
pub type dds_dynamic_type_extensibility = ::std::os::raw::c_uint;
pub const dds_dynamic_type_autoid_DDS_DYNAMIC_TYPE_AUTOID_SEQUENTIAL: dds_dynamic_type_autoid = 0;
pub const dds_dynamic_type_autoid_DDS_DYNAMIC_TYPE_AUTOID_HASH: dds_dynamic_type_autoid = 1;
pub type dds_dynamic_type_autoid = ::std::os::raw::c_uint;
pub const dds_dynamic_type_enum_value_kind_DDS_DYNAMIC_ENUM_LITERAL_VALUE_NEXT_AVAIL: dds_dynamic_type_enum_value_kind = 0;
pub const dds_dynamic_type_enum_value_kind_DDS_DYNAMIC_ENUM_LITERAL_VALUE_EXPLICIT: dds_dynamic_type_enum_value_kind = 1;
pub type dds_dynamic_type_enum_value_kind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_dynamic_enum_literal_value {
    pub value_kind: dds_dynamic_type_enum_value_kind,
    pub value: i32,
}
impl Default for dds_dynamic_enum_literal_value {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_dynamic_enum_literal_value_t = dds_dynamic_enum_literal_value;
unsafe extern "C" {
    pub fn dds_dynamic_type_create(entity: dds_entity_t, descriptor: dds_dynamic_type_descriptor_t) -> dds_dynamic_type_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_set_extensibility(type_: *mut dds_dynamic_type_t, extensibility: dds_dynamic_type_extensibility) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_set_bit_bound(type_: *mut dds_dynamic_type_t, bit_bound: u16) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_set_nested(type_: *mut dds_dynamic_type_t, is_nested: bool) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_set_autoid(type_: *mut dds_dynamic_type_t, value: dds_dynamic_type_autoid) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_add_member(type_: *mut dds_dynamic_type_t, member_descriptor: dds_dynamic_member_descriptor_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_add_enum_literal(
        type_: *mut dds_dynamic_type_t, name: *const ::std::os::raw::c_char, value: dds_dynamic_enum_literal_value_t, is_default: bool,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_add_bitmask_field(type_: *mut dds_dynamic_type_t, name: *const ::std::os::raw::c_char, position: u16) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_member_set_key(type_: *mut dds_dynamic_type_t, member_id: u32, is_key: bool) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_member_set_optional(type_: *mut dds_dynamic_type_t, member_id: u32, is_optional: bool) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_member_set_external(type_: *mut dds_dynamic_type_t, member_id: u32, is_external: bool) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_member_set_hashid(type_: *mut dds_dynamic_type_t, member_id: u32, hash_member_name: *const ::std::os::raw::c_char) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_member_set_must_understand(type_: *mut dds_dynamic_type_t, member_id: u32, is_must_understand: bool) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_register(type_: *mut dds_dynamic_type_t, type_info: *mut *mut ddsi_typeinfo) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_ref(type_: *mut dds_dynamic_type_t) -> dds_dynamic_type_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_unref(type_: *mut dds_dynamic_type_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dynamic_type_dup(src: *const dds_dynamic_type_t) -> dds_dynamic_type_t;
}
unsafe extern "C" {
    pub fn dds_request_loan(entity: dds_entity_t, sample: *mut *mut ::std::os::raw::c_void) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_return_loan(entity: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, bufsz: i32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_is_shared_memory_available(entity: dds_entity_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_request_loan_of_size(writer: dds_entity_t, size: usize, sample: *mut *mut ::std::os::raw::c_void) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_is_loan_available(entity: dds_entity_t) -> bool;
}
unsafe extern "C" {
    pub fn dds_loan_sample(writer: dds_entity_t, sample: *mut *mut ::std::os::raw::c_void) -> dds_return_t;
}
pub const dds_qos_kind_DDS_PARTICIPANT_QOS: dds_qos_kind = 0;
pub const dds_qos_kind_DDS_PUBLISHER_QOS: dds_qos_kind = 1;
pub const dds_qos_kind_DDS_SUBSCRIBER_QOS: dds_qos_kind = 2;
pub const dds_qos_kind_DDS_TOPIC_QOS: dds_qos_kind = 3;
pub const dds_qos_kind_DDS_READER_QOS: dds_qos_kind = 4;
pub const dds_qos_kind_DDS_WRITER_QOS: dds_qos_kind = 5;
pub type dds_qos_kind = ::std::os::raw::c_uint;
pub use self::dds_qos_kind as dds_qos_kind_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_qos_provider {
    _unused: [u8; 0],
}
pub type dds_qos_provider_t = dds_qos_provider;
unsafe extern "C" {
    pub fn dds_create_qos_provider(path: *const ::std::os::raw::c_char, provider: *mut *mut dds_qos_provider_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_create_qos_provider_scope(path: *const ::std::os::raw::c_char, provider: *mut *mut dds_qos_provider_t, key: *const ::std::os::raw::c_char) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_qos_provider_get_qos(provider: *const dds_qos_provider_t, type_: dds_qos_kind_t, key: *const ::std::os::raw::c_char, qos: *mut *const dds_qos_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_delete_qos_provider(provider: *mut dds_qos_provider_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ddsi_typeid {
    _unused: [u8; 0],
}
pub type dds_typeid_t = ddsi_typeid;
pub type dds_typeinfo_t = ddsi_typeinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ddsi_typeobj {
    _unused: [u8; 0],
}
pub type dds_typeobj_t = ddsi_typeobj;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_rhc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ddsi_plist {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ddsi_sertype {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ddsi_serdata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ddsi_config {
    _unused: [u8; 0],
}
pub const dds_status_id_DDS_INCONSISTENT_TOPIC_STATUS_ID: dds_status_id = 0;
pub const dds_status_id_DDS_OFFERED_DEADLINE_MISSED_STATUS_ID: dds_status_id = 1;
pub const dds_status_id_DDS_REQUESTED_DEADLINE_MISSED_STATUS_ID: dds_status_id = 2;
pub const dds_status_id_DDS_OFFERED_INCOMPATIBLE_QOS_STATUS_ID: dds_status_id = 3;
pub const dds_status_id_DDS_REQUESTED_INCOMPATIBLE_QOS_STATUS_ID: dds_status_id = 4;
pub const dds_status_id_DDS_SAMPLE_LOST_STATUS_ID: dds_status_id = 5;
pub const dds_status_id_DDS_SAMPLE_REJECTED_STATUS_ID: dds_status_id = 6;
pub const dds_status_id_DDS_DATA_ON_READERS_STATUS_ID: dds_status_id = 7;
pub const dds_status_id_DDS_DATA_AVAILABLE_STATUS_ID: dds_status_id = 8;
pub const dds_status_id_DDS_LIVELINESS_LOST_STATUS_ID: dds_status_id = 9;
pub const dds_status_id_DDS_LIVELINESS_CHANGED_STATUS_ID: dds_status_id = 10;
pub const dds_status_id_DDS_PUBLICATION_MATCHED_STATUS_ID: dds_status_id = 11;
pub const dds_status_id_DDS_SUBSCRIPTION_MATCHED_STATUS_ID: dds_status_id = 12;
pub type dds_status_id = ::std::os::raw::c_uint;
pub use self::dds_status_id as dds_status_id_t;
pub const dds_sample_state_DDS_SST_READ: dds_sample_state = 1;
pub const dds_sample_state_DDS_SST_NOT_READ: dds_sample_state = 2;
pub type dds_sample_state = ::std::os::raw::c_uint;
pub use self::dds_sample_state as dds_sample_state_t;
pub const dds_view_state_DDS_VST_NEW: dds_view_state = 4;
pub const dds_view_state_DDS_VST_OLD: dds_view_state = 8;
pub type dds_view_state = ::std::os::raw::c_uint;
pub use self::dds_view_state as dds_view_state_t;
pub const dds_instance_state_DDS_IST_ALIVE: dds_instance_state = 16;
pub const dds_instance_state_DDS_IST_NOT_ALIVE_DISPOSED: dds_instance_state = 32;
pub const dds_instance_state_DDS_IST_NOT_ALIVE_NO_WRITERS: dds_instance_state = 64;
pub type dds_instance_state = ::std::os::raw::c_uint;
pub use self::dds_instance_state as dds_instance_state_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_sample_info {
    pub sample_state: dds_sample_state_t,
    pub view_state: dds_view_state_t,
    pub instance_state: dds_instance_state_t,
    pub valid_data: bool,
    pub source_timestamp: dds_time_t,
    pub instance_handle: dds_instance_handle_t,
    pub publication_handle: dds_instance_handle_t,
    pub disposed_generation_count: u32,
    pub no_writers_generation_count: u32,
    pub sample_rank: u32,
    pub generation_rank: u32,
    pub absolute_generation_rank: u32,
}
impl Default for dds_sample_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_sample_info_t = dds_sample_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_builtintopic_participant {
    pub key: dds_guid_t,
    pub qos: *mut dds_qos_t,
}
impl Default for dds_builtintopic_participant {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_builtintopic_participant_t = dds_builtintopic_participant;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dds_builtintopic_topic_key {
    pub d: [::std::os::raw::c_uchar; 16usize],
}
pub type dds_builtintopic_topic_key_t = dds_builtintopic_topic_key;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_builtintopic_topic {
    pub key: dds_builtintopic_topic_key_t,
    pub topic_name: *mut ::std::os::raw::c_char,
    pub type_name: *mut ::std::os::raw::c_char,
    pub qos: *mut dds_qos_t,
}
impl Default for dds_builtintopic_topic {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_builtintopic_topic_t = dds_builtintopic_topic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dds_builtintopic_endpoint {
    pub key: dds_guid_t,
    pub participant_key: dds_guid_t,
    pub participant_instance_handle: dds_instance_handle_t,
    pub topic_name: *mut ::std::os::raw::c_char,
    pub type_name: *mut ::std::os::raw::c_char,
    pub qos: *mut dds_qos_t,
}
impl Default for dds_builtintopic_endpoint {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dds_builtintopic_endpoint_t = dds_builtintopic_endpoint;
unsafe extern "C" {
    pub fn dds_enable(entity: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_delete(entity: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_publisher(writer: dds_entity_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_get_subscriber(entity: dds_entity_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_get_datareader(entity: dds_entity_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_get_mask(condition: dds_entity_t, mask: *mut u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_instance_handle(entity: dds_entity_t, ihdl: *mut dds_instance_handle_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_guid(entity: dds_entity_t, guid: *mut dds_guid_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_status(entity: dds_entity_t, status: *mut u32, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_status(entity: dds_entity_t, status: *mut u32, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_status_changes(entity: dds_entity_t, status: *mut u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_status_mask(entity: dds_entity_t, mask: *mut u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_set_status_mask(entity: dds_entity_t, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_qos(entity: dds_entity_t, qos: *mut dds_qos_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_set_qos(entity: dds_entity_t, qos: *const dds_qos_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_listener(entity: dds_entity_t, listener: *mut dds_listener_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_set_listener(entity: dds_entity_t, listener: *const dds_listener_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_create_participant(domain: dds_domainid_t, qos: *const dds_qos_t, listener: *const dds_listener_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_create_domain(domain: dds_domainid_t, config: *const ::std::os::raw::c_char) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_create_domain_with_rawconfig(domain: dds_domainid_t, config: *const ddsi_config) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_get_parent(entity: dds_entity_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_get_participant(entity: dds_entity_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_get_children(entity: dds_entity_t, children: *mut dds_entity_t, size: usize) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_domainid(entity: dds_entity_t, id: *mut dds_domainid_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lookup_participant(domain_id: dds_domainid_t, participants: *mut dds_entity_t, size: usize) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_create_topic(
        participant: dds_entity_t, descriptor: *const dds_topic_descriptor_t, name: *const ::std::os::raw::c_char, qos: *const dds_qos_t, listener: *const dds_listener_t,
    ) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_create_topic_sertype(
        participant: dds_entity_t, name: *const ::std::os::raw::c_char, sertype: *mut *mut ddsi_sertype, qos: *const dds_qos_t, listener: *const dds_listener_t,
        sedp_plist: *const ddsi_plist,
    ) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_find_topic(
        scope: dds_find_scope_t, participant: dds_entity_t, name: *const ::std::os::raw::c_char, type_info: *const dds_typeinfo_t, timeout: dds_duration_t,
    ) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_find_topic_scoped(scope: dds_find_scope_t, participant: dds_entity_t, name: *const ::std::os::raw::c_char, timeout: dds_duration_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_create_topic_descriptor(
        scope: dds_find_scope_t, participant: dds_entity_t, type_info: *const dds_typeinfo_t, timeout: dds_duration_t, descriptor: *mut *mut dds_topic_descriptor_t,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_delete_topic_descriptor(descriptor: *mut dds_topic_descriptor_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_name(topic: dds_entity_t, name: *mut ::std::os::raw::c_char, size: usize) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_type_name(topic: dds_entity_t, name: *mut ::std::os::raw::c_char, size: usize) -> dds_return_t;
}
pub type dds_topic_filter_sample_fn = ::std::option::Option<unsafe extern "C" fn(sample: *const ::std::os::raw::c_void) -> bool>;
pub type dds_topic_filter_sample_arg_fn = ::std::option::Option<unsafe extern "C" fn(sample: *const ::std::os::raw::c_void, arg: *mut ::std::os::raw::c_void) -> bool>;
pub type dds_topic_filter_sampleinfo_arg_fn = ::std::option::Option<unsafe extern "C" fn(sampleinfo: *const dds_sample_info_t, arg: *mut ::std::os::raw::c_void) -> bool>;
pub type dds_topic_filter_sample_sampleinfo_arg_fn =
    ::std::option::Option<unsafe extern "C" fn(sample: *const ::std::os::raw::c_void, sampleinfo: *const dds_sample_info_t, arg: *mut ::std::os::raw::c_void) -> bool>;
pub type dds_topic_filter_fn = dds_topic_filter_sample_fn;
pub type dds_topic_filter_arg_fn = dds_topic_filter_sample_arg_fn;
pub const dds_topic_filter_mode_DDS_TOPIC_FILTER_NONE: dds_topic_filter_mode = 0;
pub const dds_topic_filter_mode_DDS_TOPIC_FILTER_SAMPLE: dds_topic_filter_mode = 1;
pub const dds_topic_filter_mode_DDS_TOPIC_FILTER_SAMPLE_ARG: dds_topic_filter_mode = 2;
pub const dds_topic_filter_mode_DDS_TOPIC_FILTER_SAMPLEINFO_ARG: dds_topic_filter_mode = 3;
pub const dds_topic_filter_mode_DDS_TOPIC_FILTER_SAMPLE_SAMPLEINFO_ARG: dds_topic_filter_mode = 4;
pub type dds_topic_filter_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union dds_topic_filter_function_union {
    pub sample: dds_topic_filter_sample_fn,
    pub sample_arg: dds_topic_filter_sample_arg_fn,
    pub sampleinfo_arg: dds_topic_filter_sampleinfo_arg_fn,
    pub sample_sampleinfo_arg: dds_topic_filter_sample_sampleinfo_arg_fn,
}
impl Default for dds_topic_filter_function_union {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dds_topic_filter {
    pub mode: dds_topic_filter_mode,
    pub f: dds_topic_filter_function_union,
    pub arg: *mut ::std::os::raw::c_void,
}
impl Default for dds_topic_filter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn dds_set_topic_filter_and_arg(topic: dds_entity_t, filter: dds_topic_filter_arg_fn, arg: *mut ::std::os::raw::c_void) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_set_topic_filter_extended(topic: dds_entity_t, filter: *const dds_topic_filter) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_topic_filter_and_arg(topic: dds_entity_t, fn_: *mut dds_topic_filter_arg_fn, arg: *mut *mut ::std::os::raw::c_void) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_topic_filter_extended(topic: dds_entity_t, filter: *mut dds_topic_filter) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_create_subscriber(participant: dds_entity_t, qos: *const dds_qos_t, listener: *const dds_listener_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_create_publisher(participant: dds_entity_t, qos: *const dds_qos_t, listener: *const dds_listener_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_suspend(publisher: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_resume(publisher: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_wait_for_acks(publisher_or_writer: dds_entity_t, timeout: dds_duration_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_create_reader(participant_or_subscriber: dds_entity_t, topic: dds_entity_t, qos: *const dds_qos_t, listener: *const dds_listener_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_create_reader_rhc(
        participant_or_subscriber: dds_entity_t, topic: dds_entity_t, qos: *const dds_qos_t, listener: *const dds_listener_t, rhc: *mut dds_rhc,
    ) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_reader_wait_for_historical_data(reader: dds_entity_t, max_wait: dds_duration_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_create_writer(participant_or_publisher: dds_entity_t, topic: dds_entity_t, qos: *const dds_qos_t, listener: *const dds_listener_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_register_instance(writer: dds_entity_t, handle: *mut dds_instance_handle_t, data: *const ::std::os::raw::c_void) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_unregister_instance(writer: dds_entity_t, data: *const ::std::os::raw::c_void) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_unregister_instance_ih(writer: dds_entity_t, handle: dds_instance_handle_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_unregister_instance_ts(writer: dds_entity_t, data: *const ::std::os::raw::c_void, timestamp: dds_time_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_unregister_instance_ih_ts(writer: dds_entity_t, handle: dds_instance_handle_t, timestamp: dds_time_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_writedispose(writer: dds_entity_t, data: *const ::std::os::raw::c_void) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_writedispose_ts(writer: dds_entity_t, data: *const ::std::os::raw::c_void, timestamp: dds_time_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dispose(writer: dds_entity_t, data: *const ::std::os::raw::c_void) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dispose_ts(writer: dds_entity_t, data: *const ::std::os::raw::c_void, timestamp: dds_time_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dispose_ih(writer: dds_entity_t, handle: dds_instance_handle_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_dispose_ih_ts(writer: dds_entity_t, handle: dds_instance_handle_t, timestamp: dds_time_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_write(writer: dds_entity_t, data: *const ::std::os::raw::c_void) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_write_flush(entity: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_writecdr(writer: dds_entity_t, serdata: *mut ddsi_serdata) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_forwardcdr(writer: dds_entity_t, serdata: *mut ddsi_serdata) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_write_ts(writer: dds_entity_t, data: *const ::std::os::raw::c_void, timestamp: dds_time_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_create_readcondition(reader: dds_entity_t, mask: u32) -> dds_entity_t;
}
pub type dds_querycondition_filter_fn = ::std::option::Option<unsafe extern "C" fn(sample: *const ::std::os::raw::c_void) -> bool>;
unsafe extern "C" {
    pub fn dds_create_querycondition(reader: dds_entity_t, mask: u32, filter: dds_querycondition_filter_fn) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_create_guardcondition(owner: dds_entity_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_set_guardcondition(guardcond: dds_entity_t, triggered: bool) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_guardcondition(guardcond: dds_entity_t, triggered: *mut bool) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_guardcondition(guardcond: dds_entity_t, triggered: *mut bool) -> dds_return_t;
}
pub type dds_attach_t = isize;
unsafe extern "C" {
    pub fn dds_create_waitset(owner: dds_entity_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_waitset_get_entities(waitset: dds_entity_t, entities: *mut dds_entity_t, size: usize) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_waitset_attach(waitset: dds_entity_t, entity: dds_entity_t, x: dds_attach_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_waitset_detach(waitset: dds_entity_t, entity: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_waitset_set_trigger(waitset: dds_entity_t, trigger: bool) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_waitset_wait(waitset: dds_entity_t, xs: *mut dds_attach_t, nxs: usize, reltimeout: dds_duration_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_waitset_wait_until(waitset: dds_entity_t, xs: *mut dds_attach_t, nxs: usize, abstimeout: dds_time_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_peek(reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_peek_mask(reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_peek_instance(
        reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32, handle: dds_instance_handle_t,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_peek_instance_mask(
        reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32, handle: dds_instance_handle_t, mask: u32,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_peek_next(reader: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read(reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_wl(reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, maxs: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_mask(reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_mask_wl(reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, maxs: u32, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_instance(
        reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32, handle: dds_instance_handle_t,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_instance_wl(
        reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, maxs: u32, handle: dds_instance_handle_t,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_instance_mask(
        reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32, handle: dds_instance_handle_t, mask: u32,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_instance_mask_wl(
        reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, maxs: u32, handle: dds_instance_handle_t, mask: u32,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_next(reader: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_next_wl(reader: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take(reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_wl(reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, maxs: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_mask(reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_mask_wl(reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, maxs: u32, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_instance(
        reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32, handle: dds_instance_handle_t,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_instance_wl(
        reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, maxs: u32, handle: dds_instance_handle_t,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_instance_mask(
        reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, bufsz: usize, maxs: u32, handle: dds_instance_handle_t, mask: u32,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_instance_mask_wl(
        reader_or_condition: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t, maxs: u32, handle: dds_instance_handle_t, mask: u32,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_next(reader: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_next_wl(reader: dds_entity_t, buf: *mut *mut ::std::os::raw::c_void, si: *mut dds_sample_info_t) -> dds_return_t;
}
pub type dds_read_with_collector_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void, si: *const dds_sample_info_t, st: *const ddsi_sertype, sd: *mut ddsi_serdata) -> dds_return_t>;
unsafe extern "C" {
    pub fn dds_peek_with_collector(
        reader_or_condition: dds_entity_t, maxs: u32, handle: dds_instance_handle_t, mask: u32, collect_sample: dds_read_with_collector_fn_t,
        collect_sample_arg: *mut ::std::os::raw::c_void,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_read_with_collector(
        reader_or_condition: dds_entity_t, maxs: u32, handle: dds_instance_handle_t, mask: u32, collect_sample: dds_read_with_collector_fn_t,
        collect_sample_arg: *mut ::std::os::raw::c_void,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_take_with_collector(
        reader_or_condition: dds_entity_t, maxs: u32, handle: dds_instance_handle_t, mask: u32, collect_sample: dds_read_with_collector_fn_t,
        collect_sample_arg: *mut ::std::os::raw::c_void,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_peekcdr(reader_or_condition: dds_entity_t, buf: *mut *mut ddsi_serdata, maxs: u32, si: *mut dds_sample_info_t, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_peekcdr_instance(
        reader_or_condition: dds_entity_t, buf: *mut *mut ddsi_serdata, maxs: u32, si: *mut dds_sample_info_t, handle: dds_instance_handle_t, mask: u32,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_readcdr(reader_or_condition: dds_entity_t, buf: *mut *mut ddsi_serdata, maxs: u32, si: *mut dds_sample_info_t, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_readcdr_instance(
        reader_or_condition: dds_entity_t, buf: *mut *mut ddsi_serdata, maxs: u32, si: *mut dds_sample_info_t, handle: dds_instance_handle_t, mask: u32,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_takecdr(reader_or_condition: dds_entity_t, buf: *mut *mut ddsi_serdata, maxs: u32, si: *mut dds_sample_info_t, mask: u32) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_takecdr_instance(
        reader_or_condition: dds_entity_t, buf: *mut *mut ddsi_serdata, maxs: u32, si: *mut dds_sample_info_t, handle: dds_instance_handle_t, mask: u32,
    ) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_lookup_instance(entity: dds_entity_t, data: *const ::std::os::raw::c_void) -> dds_instance_handle_t;
}
unsafe extern "C" {
    pub fn dds_instance_get_key(entity: dds_entity_t, ih: dds_instance_handle_t, data: *mut ::std::os::raw::c_void) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_begin_coherent(entity: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_end_coherent(entity: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_notify_readers(subscriber: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_triggered(entity: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_topic(entity: dds_entity_t) -> dds_entity_t;
}
unsafe extern "C" {
    pub fn dds_get_matched_subscriptions(writer: dds_entity_t, rds: *mut dds_instance_handle_t, nrds: usize) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_matched_subscription_data(writer: dds_entity_t, ih: dds_instance_handle_t) -> *mut dds_builtintopic_endpoint_t;
}
unsafe extern "C" {
    pub fn dds_get_matched_publications(reader: dds_entity_t, wrs: *mut dds_instance_handle_t, nwrs: usize) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_matched_publication_data(reader: dds_entity_t, ih: dds_instance_handle_t) -> *mut dds_builtintopic_endpoint_t;
}
unsafe extern "C" {
    pub fn dds_builtintopic_get_endpoint_type_info(builtintopic_endpoint: *mut dds_builtintopic_endpoint_t, type_info: *mut *const dds_typeinfo_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_builtintopic_free_endpoint(builtintopic_endpoint: *mut dds_builtintopic_endpoint_t);
}
unsafe extern "C" {
    pub fn dds_builtintopic_free_topic(builtintopic_topic: *mut dds_builtintopic_topic_t);
}
unsafe extern "C" {
    pub fn dds_builtintopic_free_participant(builtintopic_participant: *mut dds_builtintopic_participant_t);
}
unsafe extern "C" {
    pub fn dds_assert_liveliness(entity: dds_entity_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_domain_set_deafmute(entity: dds_entity_t, deaf: bool, mute: bool, reset_after: dds_duration_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_typeobj(entity: dds_entity_t, type_id: *const dds_typeid_t, timeout: dds_duration_t, type_obj: *mut *mut dds_typeobj_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_free_typeobj(type_obj: *mut dds_typeobj_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_typeinfo(entity: dds_entity_t, type_info: *mut *mut dds_typeinfo_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_free_typeinfo(type_info: *mut dds_typeinfo_t) -> dds_return_t;
}
unsafe extern "C" {
    pub fn dds_get_entity_sertype(entity: dds_entity_t, sertype: *mut *const ddsi_sertype) -> dds_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HelloWorldData_Msg {
    pub userID: i32,
    pub message: *mut ::std::os::raw::c_char,
}
impl Default for HelloWorldData_Msg {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub static HelloWorldData_Msg_desc: dds_topic_descriptor_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
